type Dog @aws_iam @aws_api_key {
  id: ID!
  name: String!
  breed: String!
  walkLength: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDogConnection @aws_api_key @aws_iam {
  items: [Dog]!
  nextToken: String
}

input ModelDogFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  breed: ModelStringInput
  walkLength: ModelStringInput
  and: [ModelDogFilterInput]
  or: [ModelDogFilterInput]
  not: ModelDogFilterInput
}

type Query {
  getDog(id: ID!): Dog @aws_api_key @aws_iam
  listDogs(filter: ModelDogFilterInput, limit: Int, nextToken: String): ModelDogConnection @aws_api_key @aws_iam
}

input ModelDogConditionInput {
  name: ModelStringInput
  breed: ModelStringInput
  walkLength: ModelStringInput
  and: [ModelDogConditionInput]
  or: [ModelDogConditionInput]
  not: ModelDogConditionInput
}

input CreateDogInput {
  id: ID
  name: String!
  breed: String!
  walkLength: String!
}

input UpdateDogInput {
  id: ID!
  name: String
  breed: String
  walkLength: String
}

input DeleteDogInput {
  id: ID!
}

type Mutation {
  createDog(input: CreateDogInput!, condition: ModelDogConditionInput): Dog @aws_api_key @aws_iam
  updateDog(input: UpdateDogInput!, condition: ModelDogConditionInput): Dog @aws_api_key @aws_iam
  deleteDog(input: DeleteDogInput!, condition: ModelDogConditionInput): Dog @aws_api_key @aws_iam
}

input ModelSubscriptionDogFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  breed: ModelSubscriptionStringInput
  walkLength: ModelSubscriptionStringInput
  and: [ModelSubscriptionDogFilterInput]
  or: [ModelSubscriptionDogFilterInput]
}

type Subscription {
  onCreateDog(filter: ModelSubscriptionDogFilterInput): Dog @aws_subscribe(mutations: ["createDog"]) @aws_api_key @aws_iam
  onUpdateDog(filter: ModelSubscriptionDogFilterInput): Dog @aws_subscribe(mutations: ["updateDog"]) @aws_api_key @aws_iam
  onDeleteDog(filter: ModelSubscriptionDogFilterInput): Dog @aws_subscribe(mutations: ["deleteDog"]) @aws_api_key @aws_iam
}
